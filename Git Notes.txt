----------------------------------------------------------------------------------------------------------------------------------------------------------
################################################### Git Notes by Abhijit Zende ##################################################################################
----------------------------------------------------------------------------------------------------------------------------------------------------------

### Git is a version control system.

### Git helps you keep track of code changes.

### Git is used to collaborate on code.

----------------------------------------------------------------------------------------------------------------------------------------------------------

Q. What is Git?
--> Git is a popular version control system. 
--> It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.

## It is used for:

--> Tracking code changes
--> Tracking who made changes
--> Coding collaboration

Q. What does Git do?
--> Manage projects with Repositories
--> Clone a project to work on a local copy
--> Control and track changes with Staging and Committing
--> Branch and Merge to allow for work on different parts and versions of a project
--> Pull the latest version of the project to a local copy
--> Push local updates to the main project

## Working with Git
--> 1) Initialize Git on a folder, making it a Repository
	Git now creates a hidden folder to keep track of changes in that folder	
	When a file is changed, added or deleted, it is considered modified
--> 2) You select the modified files you want to Stage
--> 3) The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
	Git allows you to see the full history of every commit.
	You can revert back to any previous commit.
	Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!


Q. Why Git?
--> Over 70% of developers use Git!
--> Developers can work together from anywhere in the world.
--> Developers can see the full history of the project.
--> Developers can revert to earlier versions of a project.

Q. What is GitHub?
--> Git is not the same as GitHub.
--> GitHub makes tools that use Git.
--> GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.

---------------------------------------------------------------------------------------------

Steps:
----------------------------------------------------------------------------------------------------------------------------------------------------------

1) git config --global user.name "User Name"				// Used to config user name for the whole system. 
																If you want to specify seperate username 
																then remove --global
				OR
   git config user.name "User name"							// Set's user name for working repository
----------------------------------------------------------------------------------------------------------------------------------------------------------

2) git config --global user.email "user@email.xyz"			// Used to config email for the whole system. 
																If you want to specify seperate
																username then remove --global
					OR
   git config user.email "user email"						// Set's user email for working repository
----------------------------------------------------------------------------------------------------------------------------------------------------------

/*
	Precedence for git user config is as follows:
	
	Local git config > Global git config > System git config
	
	The way this works is as follows:
	1) First git will search for any local git user configurations by checking in config file of .git folder of 
	   current working repository
	2) If any configuration is present then it will use it else it will fetch the global user configuration present 
	   in the 'C:\Users\<YourUsername>\.gitconfig' file
	3) If both are not present then it will use system set user configuration 
	4) If system user configuration is also not set then git will use default email associated with your Git 
	   hosting service account. 
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

3) git init								// This will tell git to initialize Git on that folder
										// This will save the changes made henceforth
----------------------------------------------------------------------------------------------------------------------------------------------------------

/*
	We then proceed to create a file, make changes or delete 
	something. 
	This file/files will not be automatically added into Git
	Therefore we have manually add into git	
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------


4) git status 								// To see about the status of git

----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Now Git is aware of the file, but has not added it to our repository!

	Files in your Git repository folder can be in one of 2 states:

	Tracked - files that Git knows about and are added to the repository
	Untracked - files that are in your working directory, but not added to the repository
 	When you first add files to an empty repository, they are all untracked. 
	To get Git to track them, you need to stage them, or add them to the staging environment.
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

5) git add file_name							// To stage that file 
	OR
   git add .									// To stage all cahnges made files in current and its sub-directory
	OR
   git add --all								// To stage all changes made files
----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Above command will add them in staging environment 
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Since we have finished our work, we are ready move from stage to commit for our repo.

	Adding commits keep track of our progress and changes as we work. 
	Git considers each commit change point or "save point". 
	It is a point in the project you can go back to if you find a bug, or want to make a change.

	When we commit, we should always include a message.

	By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when.
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

6) git commit -m "message" 						// Commit is like savepoint where we can come back if code breaks in future
									// This will commit the code to repo.
									// -m will tag a message for the commit
----------------------------------------------------------------------------------------------------------------------------------------------------------

7) git log								// To view the history of commits for a repository, you can use the log command

----------------------------------------------------------------------------------------------------------------------------------------------------------

8) git command -help							// List of all options after that command
   OR
   git help -all							// List all commands

----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Suppose we want to add a new feature/remove a bug in the project
	Instead of changing the code in main branch, we will create our own branch
	Branch is like seperate version of the main repository
	we create the branch and checkout to that branch
	Now the changes made in the new branch will not affect the code in main branch
	To apply this changes in the main branch we have to merge our branch with main branch
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

9) git branch branch-name 						// To create our own branch

----------------------------------------------------------------------------------------------------------------------------------------------------------

10) git branch 								// To list all branches 
											// * repersents current working branch

----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	To change branch from main branch to new branch we use the command "git checkout branch-name"	
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

11) git checkout branch-name				// Go to branch-name from current branch

----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	By using git checkout branch-name we will only be creating a branch on our local machine
	This branch is only stored on our local machine and not available on remote service like GitHub
	So in order to make it available on remote we need to push this branch to remote by using command
	git push origin branch-name
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

12) git push origin branch-name				// Push this locally present branch to remote(Github)

----------------------------------------------------------------------------------------------------------------------------------------------------------
################################################## IMPORTANT #######################################################
/*
	1] After chekout to branch-name we will make our changes 
	2] Now this changes are still untracked because remember branch is just another version of main code
	   So in order to track these changes we again have to add them to stagging using "git add --all"
	3] Once the changes have been added to staging we are ready to commit the changes using the command
	   'git commit -m "message"' this will commit the changes with mentioned message
	4] We can either decide to merge this branch with main branch without pushing the changes to remote or
	   we can also psuh the changes to GitHub through new branch and then merge with main branch
*/
################################################## IMPORTANT #######################################################
----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	To merge this new branch to main branch we can checkout to main branch and then 
	merge this new branch to main branch
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

13) git merge branch-name						// This will merge branch-name with current branch

----------------------------------------------------------------------------------------------------------------------------------------------------------
################################################## IMPORTANT #######################################################
/*
	Q. Problem
	However this scenario may happen that while multiple entities working on same project
	and at some point you made a branch from main branch 
	Now you have made changes in your newly made branch and done with your changes
	Meantime someone else also would have made a new branch after your branch was made and merged it before yours
	So the state of the main branch is not same as when you made the branch
	This will result in CONFLICT during merging of branch
	
	--> ANS: (BEST PRACTISE)
	To avoid this CONFLICT merge scenarios we on daily basis must checkout to main branch and pull the changes
	from origin which kill keep updated code in main branch and then checkout to our branch and merge main branch
	in our branch. after merging main branch into our branch push the changes to origin and then checkout to main 
	branch and merge our branch with main branch
	
	*** Steps ***
	1) git checkout main
	2) git pull
	3) git checkout our-branch
	4) git merge main
	5) git push
	6) git checkout main
	7) git merge our-branch
	
*/
################################################## IMPORTANT #######################################################
----------------------------------------------------------------------------------------------------------------------------------------------------------
/*
	Once after we have finished the changes in our branch and merged it with main branch then 
	we can delete this branch
*/
----------------------------------------------------------------------------------------------------------------------------------------------------------

14) git branch -d branch-name								// To delete the branch

----------------------------------------------------------------------------------------------------------------------------------------------------------

15) git push origin new-branch-name							// To push our local branch to github/origin

----------------------------------------------------------------------------------------------------------------------------------------------------------
################################################## IMPORTANT #######################################################
/*

	Note:
	When we create a new branch, it is created in local repository only
	To push this locally created branch to GitHub we have to push this branch to GitHub
	But before pushing the branch to GitHub, we have to add the changes to staging environment and commit it
	So the steps to push a new branch on GitHub are as follows:
	
	## STEPS TO PUSH NEW BRANCH ON GITHUB ##
	1) git checkout new-branch-name
	2) git status									// To verify if we are in  new branch
	3) git add --all								// To add all changes in staging environment
	4) git status									// To verify the changes
	5) git push origin new-branch-name
*/
################################################## IMPORTANT #######################################################
----------------------------------------------------------------------------------------------------------------------------------------------------------

16) git revert HEAD --no-edit						// To go back to previous commit
			OR	
	git revert HEAD~x --no-edit						// x = number where it returns to that negative based indexed commit
													// For eg. git revert HEAD~2 --no-edit
													// This will make git to revert to last 2nd commit
----------------------------------------------------------------------------------------------------------------------------------------------------------

17) git reset commithash							// To revert back to that commit, deleting all commits after it

----------------------------------------------------------------------------------------------------------------------------------------------------------

################################################## IMPORTANT #######################################################
*/
		REVERT IS USED TO DUPLICATE GIVEN COMMIT WITHOUT DELETING ALL COMMITS AFTER THAT GIVEN COMMIT
													-------
			RESET IS USED TO GO BACK TO GIVEN COMMIT BY DELETING ALL COMMITS AFTER THAT GIVEN COMMIT
*/
################################################## IMPORTANT #######################################################

----------------------------------------------------------------------------------------------------------------------------------------------------------

################################################## IMPORTANT #######################################################
*/
											--| STEPS FOR GIT REVERT |--
											
	1) git log --oneline 					// To check git log for knowing which commit to return to
	2) git revert HEAD --no-edit			// To DUPLICATE last commit 
				OR
	2) git revert HEAD~3					// To revert to last 3rd commit
/*
################################################## IMPORTANT #######################################################

----------------------------------------------------------------------------------------------------------------------------------------------------------

################################################## IMPORTANT #######################################################
*/
	
											--| STEPS FOR GIT RESET |--
											
	1) git log --oneline 					// To check git log for knowing which commit to return to
	2) git reset 9a9add8					// Syntax: git reset commithash, commithash is given in git log
											// Only first 7 characters of commithash are required
/*
################################################## IMPORTANT #######################################################

----------------------------------------------------------------------------------------------------------------------------------------------------------

18) git commit --amend -m "msg"			// Used to modify last commit

----------------------------------------------------------------------------------------------------------------------------------------------------------
						--| STEPS TO MODIFY LAST COMMIT |--
						
	1) git commit -m "Adding plines to reddme"
	2) git log --oneline
	
	// Oop's multiple spelling mistakes in the commit message
	// Modify the last commit using amend
	
	3) git commit --amend -m "msg"
	4) git log --onleine
	
----------------------------------------------------------------------------------------------------------------------------------------------------------

19) git log --pretty=format:"%ae" -n 1			// Displays the email address of the author of last commit

----------------------------------------------------------------------------------------------------------------------------------------------------------

20) ssh-keygen -t rsa -b 4096 -C "<email address>"		// To generate ssh key

----------------------------------------------------------------------------------------------------------------------------------------------------------

21) tail <path to id_rsa.pub>					// Add this key into github account to verify credentials

----------------------------------------------------------------------------------------------------------------------------------------------------------

22) git remote add origin <ssh address of repo.git>		// Git will now start pushing to this repo

----------------------------------------------------------------------------------------------------------------------------------------------------------
